/**
 * Simple API
 * A simple API to learn how to write OpenAPI Specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */

package io.swagger.server.api

import io.swagger.server.model.Person
import io.swagger.server.model.Persons

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class DefaultApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "DefaultApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }

  val personsGetOperation = (apiOperation[Persons]("personsGet")
    summary "Gets some persons"
    parameters (queryParam[Int]("pageSize").description("").optional, queryParam[Int]("pageNumber").description("").optional))

  get("/persons", operation(personsGetOperation)) {

    val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)

    val pageNumber = params.getAs[Int]("pageNumber")

    println("pageNumber: " + pageNumber)
    List(Person(Some("rien"), Some("rien"), "bla lala"))
  }

  val personsPostOperation = (apiOperation[Unit]("personsPost")
    summary "Creates a person"
    parameters (bodyParam[Person]("person").description("").optional))

  post("/persons", operation(personsPostOperation)) {

    val person = parsedBody.extract[Person]

    println("person: " + person)
  }

  val personsUsernameGetOperation = (apiOperation[Person]("personsUsernameGet")
    summary "Gets a person"
    parameters (pathParam[String]("username").description("")))

  get("/persons/:username", operation(personsUsernameGetOperation)) {

    // val username = params.getOrElse("username", halt(400))
    val x = Person(Some("Zzz"), Some("s"), "bla")
    println("username: " + x.username)
  }

}
